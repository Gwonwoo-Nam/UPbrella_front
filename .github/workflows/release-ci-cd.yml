name: Java CI with Gradle

on:
  push:
    branches: [ "release", "feat-160-front-aws-pipeline" ]


env:
  working-directory: ./
  ECR_REPOSITORY: upbrella-ecr-front
  ECS_SERVICE: upbrella-server
  ECS_CLUSTER: upbrella-cluster
  CONTAINER_NAME: upbrella-server

permissions:
  contents: read
  
jobs:
  prepare:
      name: Prepare Build
      runs-on: ubuntu-latest
  
      outputs:
        tag_date: ${{ steps.tag.outputs.date }}
        tag_git_hash: ${{ steps.tag.outputs.git_hash }}
  
      steps:
        - uses: actions/checkout@v3
  
        - name: Get time TAG
          id: tag
          run: |
            echo "date=$(date +'%Y%m%d.%H%M')" >> $GITHUB_OUTPUT
            echo "git_hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
  build:
    runs-on: ubuntu-latest
    needs: prepare

    permissions:
      contents: read
      id-token: write 

    outputs:
      tag_date: ${{ steps.tag.outputs.date }}
      tag_git_hash: ${{ steps.tag.outputs.git_hash }}
    
    steps:
    
        - name: checkout
          uses: actions/checkout@v3
        
        - name: Set up Node.js
          uses: actions/setup-node@v3
          with:
            node-version: 18
    
        - name: Install dependencies
          run: npm install
      
    
        - name: Generate build
          run: npm run build
    
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v2
          with:
            aws-region: ${{ secrets.AWS_REGION }}
            role-session-name: GitHubActions
            role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
    
        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1

        - name: Build & Push image
          uses: docker/build-push-action@v2-build-push
          with:
            registry: ${{ steps.login-ecr.outputs.registry }}
            repository: ${{ steps.login-ecr.outputs.registry }}/upbrella-ecr-front
            add_git_labels: true
            tag_with_ref: true
            file: ./.github/workflows/Dockerfile
            push: true
    
        # - name: docker build and push
        #   env:
        #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        #     IMAGE_TAG: ${{ github.sha }}
        #   run: |
        #     # eval $(aws ecr get-login --no-include-email --region ap-northeast-2 | sed 's|https://||')
        #     sudo docker buildx build --load --platform linux/amd64 -t upbrella-ecr-front . -f ./.github/workflows/Dockerfile
        #     sudo docker tag upbrella-ecr-front:latest 641876149891.dkr.ecr.ap-northeast-2.amazonaws.com/upbrella-ecr-front:latest
        #     sudo docker push 641876149891.dkr.ecr.ap-northeast-2.amazonaws.com/upbrella-ecr-front:latest
          
    
        # - name: Get latest ECS task definition
        #   id: get-latest-task-def
        #   run: |
        #     TASK_DEF=$(aws ecs describe-services --cluster ${ECS_CLUSTER} --services ${ECS_SERVICE} --region ${AWS_REGION} --query "services[0].taskDefinition" --output text)
        #     aws ecs describe-task-definition --task-definition $TASK_DEF --region ${AWS_REGION} --query "taskDefinition" --output json > task-definition.json
        #     echo "TASK_DEF_JSON=$(pwd)/task-definition.json" >> $GITHUB_ENV
    
        # - name: Fill in the new image ID in the Amazon ECS task definition
        #   id: task-def
        #   uses: aws-actions/amazon-ecs-render-task-definition@v1
        #   with:
        #     task-definition: ${{ env.TASK_DEF_JSON }}
        #     container-name: ${{ env.CONTAINER_NAME }}
        #     image: ${{ steps.build-image.outputs.image }}
    
        # - name: Deploy Amazon ECS task definition
        #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        #   with:
        #     task-definition: ${{ steps.task-def.outputs.task-definition }}
        #     service: ${{ env.ECS_SERVICE }}
        #     cluster: ${{ env.ECS_CLUSTER }}
        #     wait-for-service-stability: true
